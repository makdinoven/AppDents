# ---------- Общие настройки DNS внутри Docker-сети ----------
resolver 127.0.0.11 ipv6=off valid=5s;

# ---------- upstream на ваш backend ----------
upstream backend {
    server backend:8000;
}

# ---------- HTTP:80 → ACME и редирект на HTTPS (пока что для теста остаётся только HTTP) ----------
server {
    listen 80;
    server_name test.dent-s.com;

    # отдаём челленджи certbot
    location ^~ /.well-known/acme-challenge/ {
        root /var/www/certbot;
        default_type "text/plain";
        try_files $uri =404;
    }

    # всё остальное пока просто отдаём 404 или можно редиректить
    location / {
        return 404;  # или `return 301 https://$host$request_uri;` — на время выдачи сертификата
    }
}

# ----------------------------------------------------------------
#  ВРЕМЕННО ОТКЛЮЧЕН HTTPS-БЛОК — РАСКОММЕНТИРУЙТЕ ПОСЛЕ УСПЕШНОГО ВЫПУСКА СЕРТИФИКАТА
# ----------------------------------------------------------------
# server {
#     listen 443 ssl;
#     server_name test.dent-s.com;
#     client_max_body_size 100M;
#
#     resolver 127.0.0.11 ipv6=off valid=5s;
#
#     ssl_certificate     /etc/letsencrypt/live/test.dent-s.com/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/test.dent-s.com/privkey.pem;
#
#     # надоело дублировать — для HTTPS челленджи можно точно так же отдать:
#     location ^~ /.well-known/acme-challenge/ {
#         root /var/www/certbot;
#         default_type "text/plain";
#         try_files $uri =404;
#     }
#
#     # далее ваши proxy_pass и остальные локации:
#     location /api/stripe/webhook/ { … }
#     location /api/ { … }
#     location /adminer/ { … }
#     location /openapi.json { … }
#     location /redoc { … }
#     location /docs { … }
#     location /assets/img/preview_img/ { … }
#     location / {
#         proxy_pass http://frontend:80;
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#     }
# }
