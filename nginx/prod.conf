# nginx/prod.conf

user  nginx;
worker_processes  1;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout 65;
    keepalive_requests 500;

    # Настраиваем upstream'ы
    upstream backend {
        server backend:8000;  # backend - имя сервиса docker-compose
    }

    upstream frontend {
        server frontend:80;   # frontend - имя сервиса docker-compose
    }

    server {
        listen 80;
        server_name _;

        # Прокси для бэкенда (FastAPI)

        location /test {
            proxy_pass http://backend/test;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /adminer/ {
            proxy_pass http://adminer:8080/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Прокси для фронтенда (React / статика)
        # Если фронтенд-контейнер отдаёт статику на 80, можно всё остальное
        # (без /api) проксировать на frontend
        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Можно добавить заголовки CORS, если нужно
            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Origin, Content-Type, Authorization" always;
            if ($request_method = 'OPTIONS') {
                return 204;
            }
        }
    }
}
