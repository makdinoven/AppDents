version: "3.9"

services:
  # ────────────────────────── База данных ──────────────────────────
  mysql:
    image: mysql:8.0
    container_name: mysql_preprod
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    volumes:
      - mysql_data_preprod:/var/lib/mysql
    expose: ["3306"]
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks: [priv]
    logging:
      driver: json-file
      options: {max-size: "50m", max-file: "7"}

  # ───────────────────────────── Redis ──────────────────────────────
  redis:
    image: redis:7
    container_name: redis_preprod
    restart: always
    expose: ["6379"]
    networks: [priv]
    logging:
      driver: json-file
      options: {max-size: "5m", max-file: "3"}

  # ─────────────────────────── Celery workers ───────────────────────
  celery_worker_default:
    build: {context: ./backend, dockerfile: Dockerfile}
    container_name: celery_worker_preprod_default
    command: >
      celery -A app.celery_app worker -l info -Q default -n default@%h --concurrency=1
    env_file: [.env]
    working_dir: /app
    environment: [PYTHONPATH=/app]
    depends_on:
      mysql: {condition: service_healthy}
      redis: {condition: service_started}
    networks: [priv, pub]

  celery_worker_special:
    build: {context: ./backend, dockerfile: Dockerfile}
    container_name: celery_worker_preprod_special
    command: >
      celery -A app.celery_app worker -l info -Q special -n special@%h --concurrency=1
    env_file: [.env]
    working_dir: /app
    environment: [PYTHONPATH=/app]
    depends_on:
      mysql: {condition: service_healthy}
      redis: {condition: service_started}
    networks: [priv, pub]

  celery_worker_hls:
    build: ./backend
    container_name: celery_worker_preprod_hls
    command: >
      celery -A app.celery_app worker -l info -Q special_hls -n hls@%h --concurrency=1
    env_file: [.env]
    working_dir: /app
    depends_on:
      redis: {condition: service_started}
    networks: [priv, pub]

  celery_worker_book:
    build: ./backend
    container_name: celery_worker_preprod_book
    command: >
      celery -A app.celery_app worker -l info -Q book -n book@%h --concurrency=1
    env_file: [ .env ]
    working_dir: /app
    depends_on:
      redis: { condition: service_started }
    networks: [ priv, pub ]

  celery_beat:
    build: {context: ./backend, dockerfile: Dockerfile}
    container_name: celery_beat_preprod
    command: celery -A app.celery_app beat -l info --pidfile=
    env_file: [.env]
    working_dir: /app
    environment: [PYTHONPATH=/app]
    depends_on:
      mysql: {condition: service_healthy}
      redis: {condition: service_started}
    networks: [priv, pub]

  # ───────────────────────────── Backend ────────────────────────────
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.preprod
    container_name: backend_preprod
    restart: always
    env_file: [.env]
    ports: ["8000:8000"]
    depends_on:
      mysql: {condition: service_healthy}
    networks: [priv, pub]
    volumes:
      - ./assets:/var/www/AppDents/assets
    logging:
      driver: json-file
      options: {max-size: "100m", max-file: "10"}

  # ───────────────────────────── Frontend ───────────────────────────
  frontend:
    build: {context: ./frontend, dockerfile: Dockerfile}
    container_name: frontend_preprod
    restart: always
    ports: ["3002:80"]
    networks: [pub]

  # ───────────────────────────── Adminer ────────────────────────────
  adminer:
    image: adminer
    container_name: adminer_preprod
    restart: always
    ports: ["8080:8080"]
    depends_on:
      mysql: {condition: service_healthy}
    networks: [pub, priv]

  # ───────────────────────────── Nginx ──────────────────────────────
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile.preprod
    container_name: nginx_preprod
    restart: always
    depends_on:
      - backend
      - frontend
      - adminer
    ports:
      - "80:80"                       # HTTPS убран
    networks: [pub, priv]
    volumes:
      - ./assets:/assets              # остаётся, чтобы отдавать static/media
    logging:
      driver: json-file
      options: {max-size: "5m", max-file: "10"}

# ───────────────────────── Networks & Volumes ───────────────────────
networks:
  pub:  {driver: bridge}
  priv: {driver: bridge, internal: true}

volumes:
  mysql_data_preprod:
