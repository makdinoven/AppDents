"""
–°–µ—Ä–≤–∏—Å-—Å–ª–æ–π —Å–ª–∞–π–¥–µ—Ä–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
"""

import logging
from typing import List, Union, Dict

from sqlalchemy.orm import Session
from fastapi import HTTPException

from ..models.models_v2 import Slide, SlideType, Landing
from ..schemas_v2.slider import (
    SlideUpdatePayload, FreeSlidePayload, CourseSlidePayload,
)
from ..services_v2 import landing_service           # –¥–ª—è _landing_to_card

log = logging.getLogger(__name__)


# ------------------ –ü–£–ë–õ–ò–ß–ù–û–ï –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï ------------------------------------
# app/services_v2/slider_service.py

def _slide_to_dict(db: Session, slide: Slide) -> Dict:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç ORM Slide ‚Üí —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É.
    """
    if slide.type == SlideType.COURSE:
        if not slide.landing:
            # –ª—ç–Ω–¥–∏–Ω–≥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è COURSE
            raise HTTPException(status_code=500,
                                detail=f"Slide {slide.id}: landing not found")

        # –ø–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É (–∫–∞–∫ –∏ –±—ã–ª–æ)
        card = landing_service.landing_to_card(slide.landing)   # noqa

        # üÜï –±–µ–∑–æ–ø–∞—Å–Ω–æ –±–µ—Ä—ë–º main_text –∏–∑ –ª–µ–Ω–¥–∏–Ω–≥–∞
        main_text = getattr(slide.landing, "main_text", None)

        return {
            "id": slide.id,
            "type": "COURSE",
            "order_index": slide.order_index,
            "landing": card,
            "main_text": main_text,
        }

    # FREE / BOOK ‚Äî –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    return {
        "id": slide.id,
        "type": slide.type.value,
        "order_index": slide.order_index,
        "bg_media_url": slide.bg_media_url,
        "title": slide.title,
        "description": slide.description,
        "target_url": slide.target_url,
    }



def get_slides(db: Session, language: str) -> List[Dict]:
    """
    –û—Ç–¥–∞—ë—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ª–∞–π–¥—ã —Ä–µ–≥–∏–æ–Ω–∞ –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
    """
    slides = (db.query(Slide)
                .filter(Slide.language == language.upper(),
                        Slide.is_active.is_(True))
                .order_by(Slide.order_index)
                .all())
    return [_slide_to_dict(db, s) for s in slides]


# ------------------ –ê–î–ú–ò–ù-–û–ë–ù–û–í–õ–ï–ù–ò–ï -----------------------------------------
def _resolve_landing(db: Session, payload: CourseSlidePayload) -> Landing:
    """
    –ù–∞—Ö–æ–¥–∏—Ç Landing –ø–æ ID –∏–ª–∏ slug (page_name).
    """
    if payload.landing_id:
        landing = db.query(Landing).get(payload.landing_id)
    else:
        landing = db.query(Landing).filter(
            Landing.page_name == payload.landing_slug).first()
    if not landing:
        raise HTTPException(status_code=404,
                            detail="Landing not found for COURSE-slide")
    return landing


def save_slides(
    db: Session,
    language: str,
    slides_payload: List[SlideUpdatePayload],
):
    """
    –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è–µ—Ç —Å–ª–∞–π–¥—ã —Ä–µ–≥–∏–æ–Ω–∞ —Å–ø–∏—Å–∫–æ–º,
    –ø—Ä–∏—à–µ–¥—à–∏–º —Å —Ñ—Ä–æ–Ω—Ç–∞ - ¬´–∫–ª–∏–∫ –ø–æ Save¬ª –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.
    –î–µ–ª–∞–µ—Ç—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ: –ª–∏–±–æ –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –ª–∏–±–æ –Ω–∏—á–µ–≥–æ.
    """
    language = language.upper()
    log.info("[SLIDER] Saving %d slides for %s", len(slides_payload), language)

    # 1. –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º/—É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ
    db.query(Slide).filter(Slide.language == language).delete()
    db.flush()          # —É–¥–∞–ª—è–µ–º, —á—Ç–æ–±—ã –∏–Ω–¥–µ–∫—Å—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞–ª–∏

    # 2. –°–æ–∑–¥–∞—ë–º –∑–∞–Ω–æ–≤–æ –≤ –ø—Ä–∏—à–µ–¥—à–µ–º –ø–æ—Ä—è–¥–∫–µ
    for idx, payload in enumerate(slides_payload, start=1):
        if payload.type == "FREE":
            p: FreeSlidePayload = payload          # –¥–ª—è mypy
            slide = Slide(
                language    = language,
                order_index = idx,
                type        = SlideType.FREE,
                bg_media_url = p.bg_media_url,
                title        = p.title,
                description  = p.description,
                target_url   = p.target_url,
            )
        else:   # COURSE
            p: CourseSlidePayload = payload
            landing = _resolve_landing(db, p)
            slide = Slide(
                language    = language,
                order_index = idx,
                type        = SlideType.COURSE,
                landing_id  = landing.id,
            )
        db.add(slide)

    db.commit()
    log.info("[SLIDER] %s: saved successfully", language)
    # –æ—Ç–¥–∞—ë–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
    return get_slides(db, language)
