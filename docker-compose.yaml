services:
  mysql:
    image: mysql:8.0
    container_name: mysql_prod
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    volumes:
      - mysql_data_prod:/var/lib/mysql
    expose:
      - "3306"
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - priv
    logging:
      driver: json-file
      options:
        max-size: "50m"   # крупные транзакции → больше размер
        max-file: "7"

  redis:
    image: redis:7
    container_name: redis_prod
    restart: always
    expose:
      - "6379"
    networks:
      - priv
    logging:
      driver: json-file
      options:
        max-size: "5m"    # Redis мало пишет
        max-file: "3"

  celery_worker_default:
      build:
        context: ./backend
        dockerfile: Dockerfile
      container_name: celery_worker_prod_default
      command: celery -A app.celery_app worker -l info -Q default -n default@%h --concurrency=1
      env_file:
        - .env
      working_dir: /app
      environment:
        - PYTHONPATH=/app
      depends_on:
        mysql:
          condition: service_healthy
        redis:
          condition: service_started
      networks:
        - priv
        - pub

  celery_worker_special:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: celery_worker_prod_special
    command: celery -A app.celery_app worker -l info -Q special -n special@%h --concurrency=1
    env_file:
      - .env
    working_dir: /app
    environment:
      - PYTHONPATH=/app
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - priv
      - pub

  celery_worker_hls:
    build: ./backend
    container_name: celery_worker_prod_hls
    command: >
      celery -A app.celery_app worker
             -l info
             -Q special_hls
             -n hls@%h
             --concurrency=1
    env_file: .env
    working_dir: /app
    depends_on:
      redis:
        condition: service_started
    networks:
      - priv
      - pub


  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: celery_beat_prod
    command: celery -A app.celery_app beat -l info --pidfile=
    working_dir: /app
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - priv
      - pub

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend_prod
    restart: always
    env_file:
      - .env
    ports:
      - "0.0.0.0:8000:8000"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - priv
      - pub
    volumes:
      - ./assets:/var/www/AppDents/assets
    logging:
      driver: json-file
      options:
        max-size: "100m"
        max-file: "10"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend_prod
    restart: always
    ports:
      - "0.0.0.0:3002:80"
    networks:
      - pub

  adminer:
    image: adminer
    container_name: adminer_prod
    restart: always
    ports:
      - "0.0.0.0:8080:8080"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - pub
      - priv

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile.prod
    container_name: nginx_prod
    restart: always
    depends_on:
      - backend
      - frontend
      - adminer
    ports:
      - "0.0.0.0:80:80"
      - "0.0.0.0:443:443"
    networks:
      - pub
      - priv
    volumes:
      - ./assets:/assets
      - certs_data:/etc/letsencrypt
      - ./webroot:/var/www/certbot
    logging:
      driver: json-file
      options:
        max-size: "5m"
        max-file: "10"

  certbot:
    image: certbot/certbot:latest
    container_name: certbot_prod
    volumes:
      - certs_data:/etc/letsencrypt  # общий volume, где certbot хранит сертификаты
      - ./webroot:/var/www/certbot   # локальная папка, которую отдаст Nginx
    networks:
      - pub


networks:
  pub:
    driver: bridge
    enable_ipv6: true
  priv:
    driver: bridge
    internal: true
    enable_ipv6: true

volumes:
  mysql_data_prod:
    external: true
  certs_data:
